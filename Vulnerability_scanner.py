import nmap
import threading
from queue import Queue

# Expanded hardcoded CVE data for demonstration
cve_data = {
    "apache": {
        "2.4.7": ["CVE-2017-3169", "CVE-2017-7668"],
        "2.4.18": ["CVE-2018-1312"],
    },
    "nginx": {
        "1.14.0": ["CVE-2019-20372"],
        "1.18.0": ["CVE-2020-11724"],
    },
    "ssh": {
        "7.4": ["CVE-2016-10009"],
        "7.6": ["CVE-2018-15473"],
    },
    "mysql": {
        "5.7.29": ["CVE-2020-2769"],
        "8.0.21": ["CVE-2020-14539"],
    },
    "php": {
        "5.6.40": ["CVE-2019-11043"],
        "7.2.24": ["CVE-2019-11041"],
    },
    # Add more services and versions as needed
}

# Function to perform a scan on a single host
def scan_host(host):
    nm = nmap.PortScanner()
    print(f"Scanning {host} for open ports and services...")
    nm.scan(host, arguments='-sV')  # Service version detection
    return nm

# Function to check vulnerabilities
def check_vulnerabilities(host, nm, output_queue):
    vulnerabilities = {}
    if host not in nm.all_hosts():
        print(f"No scan results for {host}. The host might be unreachable or have no open ports.")
        return
    
    for proto in nm[host].all_protocols():
        for port in nm[host][proto].keys():
            service_name = nm[host][proto][port]['name']
            service_version = nm[host][proto][port]['version']
            print(f"Port: {port}\tService: {service_name}\tVersion: {service_version}")
            if service_name in cve_data:
                if service_version in cve_data[service_name]:
                    vulnerabilities[port] = {
                        "service": service_name,
                        "version": service_version,
                        "cves": cve_data[service_name][service_version]
                    }
    output_queue.put((host, vulnerabilities))

# Function to generate the report
def generate_report(vulnerabilities):
    if not vulnerabilities:
        print("\nNo known vulnerabilities found.")
        return
    print("\nVulnerability Report:")
    for host, vulns in vulnerabilities.items():
        print(f"\nHost: {host}")
        for port, details in vulns.items():
            print(f"Port: {port}")
            print(f"Service: {details['service']}")
            print(f"Version: {details['version']}")
            print("Known CVEs:")
            for cve in details['cves']:
                print(f"  - {cve}")

# Worker function for multithreading
def worker(input_queue, output_queue):
    while not input_queue.empty():
        host = input_queue.get()
        nm = scan_host(host)
        check_vulnerabilities(host, nm, output_queue)
        input_queue.task_done()

# Main function
def main():
    target = input("Enter the target IP address or hostname: ")
    hosts = [target]  # Modify this list to include more hosts if needed

    input_queue = Queue()
    output_queue = Queue()

    for host in hosts:
        input_queue.put(host)

    # Start threads
    for _ in range(10):  # Number of threads
        thread = threading.Thread(target=worker, args=(input_queue, output_queue))
        thread.start()

    # Wait for all threads to complete
    input_queue.join()

    # Collect results from the output queue
    vulnerabilities = {}
    while not output_queue.empty():
        host, vulns = output_queue.get()
        vulnerabilities[host] = vulns

    generate_report(vulnerabilities)

if __name__ == "__main__":
    main()